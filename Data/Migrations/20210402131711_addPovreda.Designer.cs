// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBordo.Data;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210402131711_addPovreda")]
    partial class addPovreda
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.EntityModels.Drzava", b =>
                {
                    b.Property<int>("drzavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nazivDrzave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zastavaDrzave")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("drzavaID");

                    b.ToTable("drzave");
                });

            modelBuilder.Entity("Data.EntityModels.GarnituraDresova", b =>
                {
                    b.Property<int>("garnituraDresovaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("lokacijaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("opis")
                        .HasColumnType("int");

                    b.HasKey("garnituraDresovaID");

                    b.ToTable("garnitureDresova");
                });

            modelBuilder.Entity("Data.EntityModels.Grad", b =>
                {
                    b.Property<int>("gradID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("drzavaID")
                        .HasColumnType("int");

                    b.Property<string>("nazivGrada")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("gradID");

                    b.HasIndex("drzavaID");

                    b.ToTable("gradovi");
                });

            modelBuilder.Entity("Data.EntityModels.Igrac", b =>
                {
                    b.Property<int>("igracID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("boljaNoga")
                        .HasColumnType("int");

                    b.Property<int>("brojDresa")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumPristupaKlubu")
                        .HasColumnType("datetime2");

                    b.Property<string>("dosadasnjiKlubovi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("godine")
                        .HasColumnType("int");

                    b.Property<int>("igracSkillsID")
                        .HasColumnType("int");

                    b.Property<int>("igracStatistikaID")
                        .HasColumnType("int");

                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pozicija")
                        .HasColumnType("int");

                    b.Property<bool>("reprezentativac")
                        .HasColumnType("bit");

                    b.Property<string>("slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("tezina")
                        .HasColumnType("int");

                    b.Property<string>("trensferMarktAcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("trzisnaVrijednost")
                        .HasColumnType("real");

                    b.Property<int>("ugovorID")
                        .HasColumnType("int");

                    b.Property<float>("visina")
                        .HasColumnType("real");

                    b.HasKey("igracID");

                    b.HasIndex("igracSkillsID")
                        .IsUnique();

                    b.HasIndex("igracStatistikaID")
                        .IsUnique();

                    b.HasIndex("korisnikID")
                        .IsUnique()
                        .HasFilter("[korisnikID] IS NOT NULL");

                    b.HasIndex("ugovorID")
                        .IsUnique();

                    b.ToTable("igraci");
                });

            modelBuilder.Entity("Data.EntityModels.IgracSkills", b =>
                {
                    b.Property<int>("igracSkillsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("igracID")
                        .HasColumnType("int");

                    b.Property<int?>("skillsStavkeID")
                        .HasColumnType("int");

                    b.HasKey("igracSkillsID");

                    b.HasIndex("skillsStavkeID");

                    b.ToTable("igracSkills");
                });

            modelBuilder.Entity("Data.EntityModels.IgracStatistika", b =>
                {
                    b.Property<int>("igracStatistikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("asistencije")
                        .HasColumnType("int");

                    b.Property<int>("brojNastupa")
                        .HasColumnType("int");

                    b.Property<int>("crveniKartoni")
                        .HasColumnType("int");

                    b.Property<int>("golovi")
                        .HasColumnType("int");

                    b.Property<int?>("igracID")
                        .HasColumnType("int");

                    b.Property<int>("odigraneMinute")
                        .HasColumnType("int");

                    b.Property<float>("prosjecnaOcjena")
                        .HasColumnType("real");

                    b.Property<int>("zbirOcjena")
                        .HasColumnType("int");

                    b.Property<int>("zutiKartoni")
                        .HasColumnType("int");

                    b.HasKey("igracStatistikaID");

                    b.ToTable("igracStatistika");
                });

            modelBuilder.Entity("Data.EntityModels.Izmjena", b =>
                {
                    b.Property<int>("izmjenaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("igracInID")
                        .HasColumnType("int");

                    b.Property<int>("igracOutID")
                        .HasColumnType("int");

                    b.Property<int>("minuta")
                        .HasColumnType("int");

                    b.Property<int>("razlog")
                        .HasColumnType("int");

                    b.HasKey("izmjenaID");

                    b.HasIndex("igracInID");

                    b.HasIndex("igracOutID");

                    b.ToTable("izmjena");
                });

            modelBuilder.Entity("Data.EntityModels.Izvještaj", b =>
                {
                    b.Property<int>("izvještajID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("brojGledalaca")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("delegatUtakmice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("goloviDomacih")
                        .HasColumnType("int");

                    b.Property<int>("goloviGostiju")
                        .HasColumnType("int");

                    b.Property<int>("igracUtakmicaID")
                        .HasColumnType("int");

                    b.Property<int>("rezultat")
                        .HasColumnType("int");

                    b.Property<string>("slikaSaUtakmice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trenerID")
                        .HasColumnType("int");

                    b.Property<int>("utakmicaID")
                        .HasColumnType("int");

                    b.Property<int>("vrijeme")
                        .HasColumnType("int");

                    b.Property<string>("youtubeVideoID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zapisnik")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("izvještajID");

                    b.HasIndex("igracUtakmicaID");

                    b.HasIndex("trenerID");

                    b.HasIndex("utakmicaID");

                    b.ToTable("izvjestaji");
                });

            modelBuilder.Entity("Data.EntityModels.Klub", b =>
                {
                    b.Property<int>("klubID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("domacaID")
                        .HasColumnType("int");

                    b.Property<int>("gostujucaID")
                        .HasColumnType("int");

                    b.Property<int>("gradID")
                        .HasColumnType("int");

                    b.Property<string>("grbKluba")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nazivKluba")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stadionID")
                        .HasColumnType("int");

                    b.HasKey("klubID");

                    b.HasIndex("domacaID");

                    b.HasIndex("gostujucaID");

                    b.HasIndex("gradID");

                    b.HasIndex("stadionID");

                    b.ToTable("klubovi");
                });

            modelBuilder.Entity("Data.EntityModels.Klupa", b =>
                {
                    b.Property<int>("klupaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("bekKlupaID")
                        .HasColumnType("int");

                    b.Property<int>("golmanKlupaID")
                        .HasColumnType("int");

                    b.Property<int>("kriloKlupaID")
                        .HasColumnType("int");

                    b.Property<int>("napadacKlupaID")
                        .HasColumnType("int");

                    b.Property<int>("odbranaKlupaID")
                        .HasColumnType("int");

                    b.Property<int?>("utakmicaID")
                        .HasColumnType("int");

                    b.Property<int>("veznjakKlupaID")
                        .HasColumnType("int");

                    b.HasKey("klupaID");

                    b.HasIndex("bekKlupaID");

                    b.HasIndex("golmanKlupaID");

                    b.HasIndex("kriloKlupaID");

                    b.HasIndex("napadacKlupaID");

                    b.HasIndex("odbranaKlupaID");

                    b.HasIndex("veznjakKlupaID");

                    b.ToTable("klupa");
                });

            modelBuilder.Entity("Data.EntityModels.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("adresaPrebivalista")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("drzavljanstvoID")
                        .HasColumnType("int");

                    b.Property<string>("emailAdresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gradRodjenjaID")
                        .HasColumnType("int");

                    b.Property<int>("igracID")
                        .HasColumnType("int");

                    b.Property<string>("ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isIgrac")
                        .HasColumnType("bit");

                    b.Property<bool>("isTrener")
                        .HasColumnType("bit");

                    b.Property<string>("prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trenerID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("drzavljanstvoID");

                    b.HasIndex("gradRodjenjaID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Data.EntityModels.Notifikacija", b =>
                {
                    b.Property<int>("notifikacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("datumNotifikacije")
                        .HasColumnType("datetime2");

                    b.Property<bool>("poruka")
                        .HasColumnType("bit");

                    b.Property<string>("posiljaoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("statusNotifikacije")
                        .HasColumnType("int");

                    b.Property<string>("tekstNotifikacije")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipNotifikacije")
                        .HasColumnType("int");

                    b.HasKey("notifikacijaID");

                    b.HasIndex("KorisnikId");

                    b.ToTable("notifikacije");
                });

            modelBuilder.Entity("Data.EntityModels.Povreda", b =>
                {
                    b.Property<int>("povredaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datumPovrede")
                        .HasColumnType("datetime2");

                    b.Property<int>("igracID")
                        .HasColumnType("int");

                    b.Property<string>("kratkiOpis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("misljenjeLjekara")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("odsustvoDO")
                        .HasColumnType("datetime2");

                    b.Property<int>("tipPovrede")
                        .HasColumnType("int");

                    b.HasKey("povredaID");

                    b.HasIndex("igracID");

                    b.ToTable("povrede");
                });

            modelBuilder.Entity("Data.EntityModels.PrvaPostava", b =>
                {
                    b.Property<int>("prvaPostavaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("desniBekID")
                        .HasColumnType("int");

                    b.Property<int>("desnoKriloID")
                        .HasColumnType("int");

                    b.Property<int>("drugiStoperID")
                        .HasColumnType("int");

                    b.Property<int>("drugiZadnjiVezniID")
                        .HasColumnType("int");

                    b.Property<int>("golmanID")
                        .HasColumnType("int");

                    b.Property<int>("lijeviBekID")
                        .HasColumnType("int");

                    b.Property<int>("lijevoKriloID")
                        .HasColumnType("int");

                    b.Property<int>("napadacID")
                        .HasColumnType("int");

                    b.Property<int>("prednjiVezniID")
                        .HasColumnType("int");

                    b.Property<int>("prviStoperID")
                        .HasColumnType("int");

                    b.Property<int>("prviZadnjiVezniID")
                        .HasColumnType("int");

                    b.Property<int?>("utakmicaID")
                        .HasColumnType("int");

                    b.HasKey("prvaPostavaID");

                    b.HasIndex("desniBekID");

                    b.HasIndex("desnoKriloID");

                    b.HasIndex("drugiStoperID");

                    b.HasIndex("drugiZadnjiVezniID");

                    b.HasIndex("golmanID");

                    b.HasIndex("lijeviBekID");

                    b.HasIndex("lijevoKriloID");

                    b.HasIndex("napadacID");

                    b.HasIndex("prednjiVezniID");

                    b.HasIndex("prviStoperID");

                    b.HasIndex("prviZadnjiVezniID");

                    b.ToTable("prvaPostava");
                });

            modelBuilder.Entity("Data.EntityModels.SkillsStavke", b =>
                {
                    b.Property<int>("skillsStavkeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("brzina")
                        .HasColumnType("real");

                    b.Property<int>("brzinaZbir")
                        .HasColumnType("int");

                    b.Property<float>("dodavanje")
                        .HasColumnType("real");

                    b.Property<int>("dodavanjeZbir")
                        .HasColumnType("int");

                    b.Property<float>("dribljanje")
                        .HasColumnType("real");

                    b.Property<int>("dribljanjeZbir")
                        .HasColumnType("int");

                    b.Property<int?>("igracID")
                        .HasColumnType("int");

                    b.Property<float>("klizeciStart")
                        .HasColumnType("real");

                    b.Property<int>("klizeciStartZbir")
                        .HasColumnType("int");

                    b.Property<float>("kontrolaLopte")
                        .HasColumnType("real");

                    b.Property<int>("kontrolaLopteZbir")
                        .HasColumnType("int");

                    b.Property<float>("kretanje")
                        .HasColumnType("real");

                    b.Property<int>("kretanjeZbir")
                        .HasColumnType("int");

                    b.Property<float>("markiranje")
                        .HasColumnType("real");

                    b.Property<int>("markiranjeZbir")
                        .HasColumnType("int");

                    b.Property<float>("odbrana")
                        .HasColumnType("real");

                    b.Property<int>("odbranaZbir")
                        .HasColumnType("int");

                    b.Property<float>("prosjekOcjena")
                        .HasColumnType("real");

                    b.Property<float>("skok")
                        .HasColumnType("real");

                    b.Property<int>("skokZbir")
                        .HasColumnType("int");

                    b.Property<float>("snaga")
                        .HasColumnType("real");

                    b.Property<int>("snagaZbir")
                        .HasColumnType("int");

                    b.Property<float>("sut")
                        .HasColumnType("real");

                    b.Property<int>("sutZbir")
                        .HasColumnType("int");

                    b.Property<float>("zbirOcjena")
                        .HasColumnType("real");

                    b.HasKey("skillsStavkeID");

                    b.HasIndex("igracID");

                    b.ToTable("skillsStavke");
                });

            modelBuilder.Entity("Data.EntityModels.Stadion", b =>
                {
                    b.Property<int>("stadionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("imeStadiona")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slikaStadiona")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stadionID");

                    b.ToTable("stadioni");
                });

            modelBuilder.Entity("Data.EntityModels.Trener", b =>
                {
                    b.Property<int>("trenerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datumPristupaKlubu")
                        .HasColumnType("datetime2");

                    b.Property<string>("dosadasnjiKlubovi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("godineIskustva")
                        .HasColumnType("int");

                    b.Property<string>("imePrezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("preferiranaFormacija")
                        .HasColumnType("int");

                    b.Property<DateTime>("prvaZvanicnaUtakmica")
                        .HasColumnType("datetime2");

                    b.Property<string>("slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("tranfermarktAcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trenerStatistikaID")
                        .HasColumnType("int");

                    b.Property<int>("trenerskaLicenca")
                        .HasColumnType("int");

                    b.Property<float>("trzisnaVrijednost")
                        .HasColumnType("real");

                    b.Property<int>("ugovorID")
                        .HasColumnType("int");

                    b.HasKey("trenerID");

                    b.HasIndex("korisnikID")
                        .IsUnique()
                        .HasFilter("[korisnikID] IS NOT NULL");

                    b.HasIndex("trenerStatistikaID")
                        .IsUnique();

                    b.HasIndex("ugovorID")
                        .IsUnique();

                    b.ToTable("treneri");
                });

            modelBuilder.Entity("Data.EntityModels.TrenerStatistika", b =>
                {
                    b.Property<int>("trenerStatistikaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("brojNerjesenih")
                        .HasColumnType("int");

                    b.Property<int>("brojPobjeda")
                        .HasColumnType("int");

                    b.Property<int>("brojPoraza")
                        .HasColumnType("int");

                    b.Property<int>("brojUtakmica")
                        .HasColumnType("int");

                    b.Property<int?>("trenerID")
                        .HasColumnType("int");

                    b.HasKey("trenerStatistikaID");

                    b.ToTable("trenerStatistika");
                });

            modelBuilder.Entity("Data.EntityModels.Trening", b =>
                {
                    b.Property<int>("treningID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datumOdrzavanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("fokusTreninga")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lokacija")
                        .HasColumnType("int");

                    b.Property<string>("satnica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("statusTreninga")
                        .HasColumnType("int");

                    b.Property<int>("zabiljezioID")
                        .HasColumnType("int");

                    b.HasKey("treningID");

                    b.HasIndex("zabiljezioID");

                    b.ToTable("treninzi");
                });

            modelBuilder.Entity("Data.EntityModels.Ugovor", b =>
                {
                    b.Property<int>("ugovorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("datumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<int>("duzinaUgovora")
                        .HasColumnType("int");

                    b.Property<int?>("igracID")
                        .HasColumnType("int");

                    b.Property<float>("iznosPlate")
                        .HasColumnType("real");

                    b.Property<string>("napomene")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("trenerID")
                        .HasColumnType("int");

                    b.HasKey("ugovorID");

                    b.ToTable("ugovori");
                });

            modelBuilder.Entity("Data.EntityModels.Utakmica", b =>
                {
                    b.Property<int>("utakmicaID")
                        .HasColumnType("int");

                    b.Property<int>("PredvidjenoVrijeme")
                        .HasColumnType("int");

                    b.Property<int>("brojUlaznica")
                        .HasColumnType("int");

                    b.Property<float>("cijenaUlaznice")
                        .HasColumnType("real");

                    b.Property<DateTime>("datumOdigravanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("domacinID")
                        .HasColumnType("int");

                    b.Property<int>("garnituraDresaID")
                        .HasColumnType("int");

                    b.Property<int>("gostID")
                        .HasColumnType("int");

                    b.Property<int>("kapitenID")
                        .HasColumnType("int");

                    b.Property<int>("klupaID")
                        .HasColumnType("int");

                    b.Property<string>("napomene")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("prvaPostavaID")
                        .HasColumnType("int");

                    b.Property<string>("satnica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stadionID")
                        .HasColumnType("int");

                    b.Property<int>("statusUtakmice")
                        .HasColumnType("int");

                    b.Property<string>("sudija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trenerID")
                        .HasColumnType("int");

                    b.Property<int>("vrstaTakmicenjaID")
                        .HasColumnType("int");

                    b.Property<int>("vrstaUtakmice")
                        .HasColumnType("int");

                    b.HasKey("utakmicaID");

                    b.HasIndex("domacinID");

                    b.HasIndex("garnituraDresaID");

                    b.HasIndex("gostID");

                    b.HasIndex("kapitenID");

                    b.HasIndex("stadionID");

                    b.HasIndex("trenerID");

                    b.HasIndex("vrstaTakmicenjaID");

                    b.ToTable("utakmice");
                });

            modelBuilder.Entity("Data.EntityModels.UtakmicaIzmjena", b =>
                {
                    b.Property<int>("utakmicaIzmjenaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("izmjenaID")
                        .HasColumnType("int");

                    b.Property<int?>("izvještajID")
                        .HasColumnType("int");

                    b.Property<int>("utakmicaID")
                        .HasColumnType("int");

                    b.HasKey("utakmicaIzmjenaID");

                    b.HasIndex("izmjenaID");

                    b.HasIndex("izvještajID");

                    b.HasIndex("utakmicaID");

                    b.ToTable("utakmicaIzmjena");
                });

            modelBuilder.Entity("Data.EntityModels.UtakmicaNastupi", b =>
                {
                    b.Property<int>("utakmicaNastupiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("asistencije")
                        .HasColumnType("int");

                    b.Property<int>("crveniKartoni")
                        .HasColumnType("int");

                    b.Property<int>("golovi")
                        .HasColumnType("int");

                    b.Property<int>("igracID")
                        .HasColumnType("int");

                    b.Property<int?>("izvještajID")
                        .HasColumnType("int");

                    b.Property<string>("komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("minute")
                        .HasColumnType("int");

                    b.Property<int>("ocjena")
                        .HasColumnType("int");

                    b.Property<int>("utakmicaID")
                        .HasColumnType("int");

                    b.Property<int>("zutiKartoni")
                        .HasColumnType("int");

                    b.HasKey("utakmicaNastupiID");

                    b.HasIndex("igracID");

                    b.HasIndex("izvještajID");

                    b.HasIndex("utakmicaID");

                    b.ToTable("nastupi");
                });

            modelBuilder.Entity("Data.EntityModels.UtakmicaOcjene", b =>
                {
                    b.Property<int>("utakmicaOcjeneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("brzina")
                        .HasColumnType("int");

                    b.Property<int>("dodavanje")
                        .HasColumnType("int");

                    b.Property<int>("dribljanje")
                        .HasColumnType("int");

                    b.Property<int>("igracID")
                        .HasColumnType("int");

                    b.Property<int?>("izvještajID")
                        .HasColumnType("int");

                    b.Property<int>("klizeciStart")
                        .HasColumnType("int");

                    b.Property<int>("kontrolaLopte")
                        .HasColumnType("int");

                    b.Property<int>("kretanje")
                        .HasColumnType("int");

                    b.Property<int>("markiranje")
                        .HasColumnType("int");

                    b.Property<int>("odbrana")
                        .HasColumnType("int");

                    b.Property<float>("prosjecnaOcjena")
                        .HasColumnType("real");

                    b.Property<int>("skok")
                        .HasColumnType("int");

                    b.Property<int>("snaga")
                        .HasColumnType("int");

                    b.Property<int>("sut")
                        .HasColumnType("int");

                    b.Property<int>("utakmicaID")
                        .HasColumnType("int");

                    b.HasKey("utakmicaOcjeneID");

                    b.HasIndex("igracID");

                    b.HasIndex("izvještajID");

                    b.HasIndex("utakmicaID");

                    b.ToTable("ocjene");
                });

            modelBuilder.Entity("Data.EntityModels.VrstaTakmicenja", b =>
                {
                    b.Property<int>("vrstaTakmicenjaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("logoTakmicenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nazivVrsteTakmicenja")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("vrstaTakmicenjaID");

                    b.ToTable("vrsteTakmicenja");
                });

            modelBuilder.Entity("Data.EntityModels.Zahtjev", b =>
                {
                    b.Property<int>("zahtjevID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("odgovor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("prioritet")
                        .HasColumnType("int");

                    b.Property<int>("statusZahtjeva")
                        .HasColumnType("int");

                    b.Property<int>("svrha")
                        .HasColumnType("int");

                    b.Property<int>("tipZahtjeva")
                        .HasColumnType("int");

                    b.HasKey("zahtjevID");

                    b.HasIndex("korisnikID");

                    b.ToTable("zahtjevi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.EntityModels.Grad", b =>
                {
                    b.HasOne("Data.EntityModels.Drzava", "drzava")
                        .WithMany()
                        .HasForeignKey("drzavaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Igrac", b =>
                {
                    b.HasOne("Data.EntityModels.IgracSkills", "igracSkills")
                        .WithOne("igrac")
                        .HasForeignKey("Data.EntityModels.Igrac", "igracSkillsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.IgracStatistika", "igracStatistika")
                        .WithOne("igrac")
                        .HasForeignKey("Data.EntityModels.Igrac", "igracStatistikaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Korisnik", "korisnik")
                        .WithOne("igrac")
                        .HasForeignKey("Data.EntityModels.Igrac", "korisnikID");

                    b.HasOne("Data.EntityModels.Ugovor", "ugovor")
                        .WithOne("igrac")
                        .HasForeignKey("Data.EntityModels.Igrac", "ugovorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.IgracSkills", b =>
                {
                    b.HasOne("Data.EntityModels.SkillsStavke", "skillsStavke")
                        .WithMany()
                        .HasForeignKey("skillsStavkeID");
                });

            modelBuilder.Entity("Data.EntityModels.Izmjena", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "igracIn")
                        .WithMany()
                        .HasForeignKey("igracInID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "igracOut")
                        .WithMany()
                        .HasForeignKey("igracOutID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Izvještaj", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "igracUtakmica")
                        .WithMany()
                        .HasForeignKey("igracUtakmicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Trener", "trener")
                        .WithMany()
                        .HasForeignKey("trenerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Utakmica", "utakmica")
                        .WithMany()
                        .HasForeignKey("utakmicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Klub", b =>
                {
                    b.HasOne("Data.EntityModels.GarnituraDresova", "domaca")
                        .WithMany()
                        .HasForeignKey("domacaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.GarnituraDresova", "gostujuca")
                        .WithMany()
                        .HasForeignKey("gostujucaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Grad", "grad")
                        .WithMany()
                        .HasForeignKey("gradID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Stadion", "stadion")
                        .WithMany()
                        .HasForeignKey("stadionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Klupa", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "bekKlupa")
                        .WithMany()
                        .HasForeignKey("bekKlupaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "golmanKlupa")
                        .WithMany()
                        .HasForeignKey("golmanKlupaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "kriloKlupa")
                        .WithMany()
                        .HasForeignKey("kriloKlupaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "napadacKlupa")
                        .WithMany()
                        .HasForeignKey("napadacKlupaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "odbranaKlupa")
                        .WithMany()
                        .HasForeignKey("odbranaKlupaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "veznjakKlupa")
                        .WithMany()
                        .HasForeignKey("veznjakKlupaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Korisnik", b =>
                {
                    b.HasOne("Data.EntityModels.Drzava", "drzavljanstvo")
                        .WithMany()
                        .HasForeignKey("drzavljanstvoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Grad", "gradRodjenja")
                        .WithMany()
                        .HasForeignKey("gradRodjenjaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Notifikacija", b =>
                {
                    b.HasOne("Data.EntityModels.Korisnik", null)
                        .WithMany("notifikacije")
                        .HasForeignKey("KorisnikId");
                });

            modelBuilder.Entity("Data.EntityModels.Povreda", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "igrac")
                        .WithMany()
                        .HasForeignKey("igracID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.PrvaPostava", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "desniBek")
                        .WithMany()
                        .HasForeignKey("desniBekID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "desnoKrilo")
                        .WithMany()
                        .HasForeignKey("desnoKriloID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "drugiStoper")
                        .WithMany()
                        .HasForeignKey("drugiStoperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "drugiZadnjiVezni")
                        .WithMany()
                        .HasForeignKey("drugiZadnjiVezniID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "golman")
                        .WithMany()
                        .HasForeignKey("golmanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "lijeviBek")
                        .WithMany()
                        .HasForeignKey("lijeviBekID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "lijevoKrilo")
                        .WithMany()
                        .HasForeignKey("lijevoKriloID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "napadac")
                        .WithMany()
                        .HasForeignKey("napadacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "prednjiVezni")
                        .WithMany()
                        .HasForeignKey("prednjiVezniID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "prviStoper")
                        .WithMany()
                        .HasForeignKey("prviStoperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "prviZadnjiVezni")
                        .WithMany()
                        .HasForeignKey("prviZadnjiVezniID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.SkillsStavke", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "igrac")
                        .WithMany()
                        .HasForeignKey("igracID");
                });

            modelBuilder.Entity("Data.EntityModels.Trener", b =>
                {
                    b.HasOne("Data.EntityModels.Korisnik", "korisnik")
                        .WithOne("trener")
                        .HasForeignKey("Data.EntityModels.Trener", "korisnikID");

                    b.HasOne("Data.EntityModels.TrenerStatistika", "trenerStatistika")
                        .WithOne("trener")
                        .HasForeignKey("Data.EntityModels.Trener", "trenerStatistikaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Ugovor", "ugovor")
                        .WithOne("trener")
                        .HasForeignKey("Data.EntityModels.Trener", "ugovorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Trening", b =>
                {
                    b.HasOne("Data.EntityModels.Trener", "zabiljezio")
                        .WithMany()
                        .HasForeignKey("zabiljezioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Utakmica", b =>
                {
                    b.HasOne("Data.EntityModels.Klub", "domacin")
                        .WithMany()
                        .HasForeignKey("domacinID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.GarnituraDresova", "garnituraDresa")
                        .WithMany()
                        .HasForeignKey("garnituraDresaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Klub", "gost")
                        .WithMany()
                        .HasForeignKey("gostID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Igrac", "kapiten")
                        .WithMany()
                        .HasForeignKey("kapitenID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Stadion", "stadion")
                        .WithMany()
                        .HasForeignKey("stadionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Trener", "trener")
                        .WithMany()
                        .HasForeignKey("trenerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Klupa", "klupa")
                        .WithOne("utakmica")
                        .HasForeignKey("Data.EntityModels.Utakmica", "utakmicaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.PrvaPostava", "prvaPostava")
                        .WithOne("utakmica")
                        .HasForeignKey("Data.EntityModels.Utakmica", "utakmicaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.VrstaTakmicenja", "vrstaTakmicenja")
                        .WithMany()
                        .HasForeignKey("vrstaTakmicenjaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.UtakmicaIzmjena", b =>
                {
                    b.HasOne("Data.EntityModels.Izmjena", "izmjena")
                        .WithMany()
                        .HasForeignKey("izmjenaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Izvještaj", null)
                        .WithMany("izmjene")
                        .HasForeignKey("izvještajID");

                    b.HasOne("Data.EntityModels.Utakmica", "utakmica")
                        .WithMany()
                        .HasForeignKey("utakmicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.UtakmicaNastupi", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "igrac")
                        .WithMany()
                        .HasForeignKey("igracID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Izvještaj", null)
                        .WithMany("nastupi")
                        .HasForeignKey("izvještajID");

                    b.HasOne("Data.EntityModels.Utakmica", "utakmica")
                        .WithMany()
                        .HasForeignKey("utakmicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.UtakmicaOcjene", b =>
                {
                    b.HasOne("Data.EntityModels.Igrac", "igrac")
                        .WithMany()
                        .HasForeignKey("igracID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Izvještaj", null)
                        .WithMany("ocjene")
                        .HasForeignKey("izvještajID");

                    b.HasOne("Data.EntityModels.Utakmica", "utakmica")
                        .WithMany()
                        .HasForeignKey("utakmicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.EntityModels.Zahtjev", b =>
                {
                    b.HasOne("Data.EntityModels.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
